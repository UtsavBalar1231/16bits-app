[gd_scene load_steps=47 format=2]

[ext_resource path="res://shaders/circles05-Sheet.png" type="Texture" id=8]
[ext_resource path="res://shaders/Backgrounds.shader" type="Shader" id=10]
[ext_resource path="res://assets/sprites/PNG spritesheet/circles06-Sheet.png" type="Texture" id=34]
[ext_resource path="res://assets/sprites/PNG spritesheet/lines01-Sheet.png" type="Texture" id=38]
[ext_resource path="res://assets/sprites/PNG spritesheet/squares01-Sheet.png" type="Texture" id=40]
[ext_resource path="res://assets/sprites/PNG spritesheet/weird03-Sheet.png" type="Texture" id=43]

[sub_resource type="Shader" id=1]
code = "/* 
Earthbound battle backgrounds shader with scrolling effect and palette cycling like in the original game.
@retr0_dev
	
Apply the shader to a TextureRect or a Sprite. Use a texture with some shapes in a transparent background for best results.
You can then use a ColorRect or another method to paint the background.
You can use the shader on multiple TextureRects and obtain a double-buffer effect tweaking the values for each one, remember to Make Unique the shader material.
*/
shader_type canvas_item;
//COLOR.a = 

uniform int lines = 0;
uniform float screen_height = 640.0;
uniform float amplitude = 0.075;
uniform float frequency = 10.0;
uniform float speed = 2.0;
uniform float amplitude_vertical = 0.0;
uniform float frequency_vertical = 0.0;
uniform float speed_vertical = 0.0;
uniform vec2 scroll_direction = vec2(0.0, 0.0);
uniform float scrolling_speed = 0.08;
uniform bool enable_palette_cycling = false;
uniform sampler2D palette;
uniform float palette_speed = 0.1;

void fragment()
{
	
	    //ALPHA = 0.25;
	float diff_x = amplitude * sin((frequency * UV.y) + (speed * TIME));
	float diff_y = amplitude_vertical * sin((frequency_vertical * UV.y)  + (speed_vertical * TIME));
	vec2 scroll = scroll_direction * TIME * scrolling_speed;
	vec4 tex = texture(TEXTURE, vec2(UV.x + diff_x, UV.y + diff_y) + scroll);
	float palette_swap = mod(tex.r - TIME * palette_speed, 1.0);
	
	if (enable_palette_cycling)
	{
		COLOR = vec4(texture(palette, vec2(palette_swap, 0)).rgb, tex.a);
	}
	else COLOR = tex;
	if (lines >= 1)
	{
	COLOR = mix(vec4(0.0), COLOR, float(int(UV.y * screen_height) % 2));
	}
	//COLOR.a = 1;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/lines = 0
shader_param/screen_height = 256.0
shader_param/amplitude = 0.0
shader_param/frequency = 0.0
shader_param/speed = 0.0
shader_param/amplitude_vertical = 0.733
shader_param/frequency_vertical = 1.086
shader_param/speed_vertical = 0.697
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="AtlasTexture" id=3]
flags = 2
atlas = ExtResource( 38 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=4]
flags = 2
atlas = ExtResource( 38 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=5]
flags = 2
atlas = ExtResource( 38 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=6]
flags = 2
atlas = ExtResource( 38 )
region = Rect2( 768, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=7]
flags = 2
atlas = ExtResource( 38 )
region = Rect2( 1024, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=8]
flags = 2
atlas = ExtResource( 38 )
region = Rect2( 1280, 0, 256, 256 )

[sub_resource type="SpriteFrames" id=9]
animations = [ {
"frames": [ SubResource( 3 ), SubResource( 4 ), SubResource( 5 ), SubResource( 6 ), SubResource( 7 ), SubResource( 8 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Shader" id=10]
code = "/* 
Earthbound battle backgrounds shader with scrolling effect and palette cycling like in the original game.
@retr0_dev
	
Apply the shader to a TextureRect or a Sprite. Use a texture with some shapes in a transparent background for best results.
You can then use a ColorRect or another method to paint the background.
You can use the shader on multiple TextureRects and obtain a double-buffer effect tweaking the values for each one, remember to Make Unique the shader material.
*/
shader_type canvas_item;
//COLOR.a = 

uniform int lines = 0;
uniform float screen_height = 640.0;
uniform float amplitude = 0.075;
uniform float frequency = 10.0;
uniform float speed = 2.0;
uniform float amplitude_vertical = 0.0;
uniform float frequency_vertical = 0.0;
uniform float speed_vertical = 0.0;
uniform vec2 scroll_direction = vec2(0.0, 0.0);
uniform float scrolling_speed = 0.08;
uniform bool enable_palette_cycling = false;
uniform sampler2D palette;
uniform float palette_speed = 0.1;

void fragment()
{
	
	    //ALPHA = 0.25;
	float diff_x = amplitude * sin((frequency * UV.y) + (speed * TIME));
	float diff_y = amplitude_vertical * sin((frequency_vertical * UV.y)  + (speed_vertical * TIME));
	vec2 scroll = scroll_direction * TIME * scrolling_speed;
	vec4 tex = texture(TEXTURE, vec2(UV.x + diff_x, UV.y + diff_y) + scroll);
	float palette_swap = mod(tex.r - TIME * palette_speed, 1.0);
	
	if (enable_palette_cycling)
	{
		COLOR = vec4(texture(palette, vec2(palette_swap, 0)).rgb, tex.a);
	}
	else COLOR = tex;
	if (lines >= 1)
	{
	COLOR = mix(vec4(0.0), COLOR, float(int(UV.y * screen_height) % 2));
	}
	//COLOR.a = 1;
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/lines = 0
shader_param/screen_height = 256.0
shader_param/amplitude = 0.002
shader_param/frequency = 11.196
shader_param/speed = 2.608
shader_param/amplitude_vertical = 0.0
shader_param/frequency_vertical = 0.0
shader_param/speed_vertical = 0.0
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="AtlasTexture" id=12]
flags = 2
atlas = ExtResource( 43 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=13]
flags = 2
atlas = ExtResource( 43 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=14]
flags = 2
atlas = ExtResource( 43 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=15]
flags = 2
atlas = ExtResource( 43 )
region = Rect2( 768, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=16]
flags = 2
atlas = ExtResource( 43 )
region = Rect2( 1024, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=17]
flags = 2
atlas = ExtResource( 43 )
region = Rect2( 1280, 0, 256, 256 )

[sub_resource type="SpriteFrames" id=18]
animations = [ {
"frames": [ SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Shader" id=19]
code = "/* 
Earthbound battle backgrounds shader with scrolling effect and palette cycling like in the original game.
@retr0_dev
	
Apply the shader to a TextureRect or a Sprite. Use a texture with some shapes in a transparent background for best results.
You can then use a ColorRect or another method to paint the background.
You can use the shader on multiple TextureRects and obtain a double-buffer effect tweaking the values for each one, remember to Make Unique the shader material.
*/
shader_type canvas_item;
//COLOR.a = 

uniform int lines = 0;
uniform float screen_height = 640.0;
uniform float amplitude = 0.075;
uniform float frequency = 10.0;
uniform float speed = 2.0;
uniform float amplitude_vertical = 0.0;
uniform float frequency_vertical = 0.0;
uniform float speed_vertical = 0.0;
uniform vec2 scroll_direction = vec2(0.0, 0.0);
uniform float scrolling_speed = 0.08;
uniform bool enable_palette_cycling = false;
uniform sampler2D palette;
uniform float palette_speed = 0.1;

void fragment()
{
	
	    //ALPHA = 0.25;
	float diff_x = amplitude * sin((frequency * UV.y) + (speed * TIME));
	float diff_y = amplitude_vertical * sin((frequency_vertical * UV.y)  + (speed_vertical * TIME));
	vec2 scroll = scroll_direction * TIME * scrolling_speed;
	vec4 tex = texture(TEXTURE, vec2(UV.x + diff_x, UV.y + diff_y) + scroll);
	float palette_swap = mod(tex.r - TIME * palette_speed, 1.0);
	
	if (enable_palette_cycling)
	{
		COLOR = vec4(texture(palette, vec2(palette_swap, 0)).rgb, tex.a);
	}
	else COLOR = tex;
	if (lines >= 1)
	{
	COLOR = mix(vec4(0.0), COLOR, float(int(UV.y * screen_height) % 2));
	}
	//COLOR.a = 1;
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/lines = 0
shader_param/screen_height = 640.0
shader_param/amplitude = 0.075
shader_param/frequency = 3.216
shader_param/speed = 1.833
shader_param/amplitude_vertical = 0.127
shader_param/frequency_vertical = 0.0
shader_param/speed_vertical = 0.0
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="AtlasTexture" id=21]
flags = 2
atlas = ExtResource( 40 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=22]
flags = 2
atlas = ExtResource( 40 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=23]
flags = 2
atlas = ExtResource( 40 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=24]
flags = 2
atlas = ExtResource( 40 )
region = Rect2( 768, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=25]
flags = 2
atlas = ExtResource( 40 )
region = Rect2( 1024, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=26]
flags = 2
atlas = ExtResource( 40 )
region = Rect2( 1280, 0, 256, 256 )

[sub_resource type="SpriteFrames" id=27]
animations = [ {
"frames": [ SubResource( 21 ), SubResource( 22 ), SubResource( 23 ), SubResource( 24 ), SubResource( 25 ), SubResource( 26 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="ShaderMaterial" id=28]
shader = SubResource( 19 )
shader_param/lines = 1
shader_param/screen_height = 640.0
shader_param/amplitude = 0.078
shader_param/frequency = 3.216
shader_param/speed = 1.833
shader_param/amplitude_vertical = 0.042
shader_param/frequency_vertical = 0.102
shader_param/speed_vertical = 0.129
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="ShaderMaterial" id=29]
shader = ExtResource( 10 )
shader_param/transparencia = 1.0
shader_param/lines = 0
shader_param/screen_height = 256.0
shader_param/amplitude = 0.0
shader_param/frequency = 0.0
shader_param/speed = 1.0
shader_param/amplitude_vertical = 0.081
shader_param/frequency_vertical = 1.748
shader_param/speed_vertical = 1.608
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="AtlasTexture" id=30]
flags = 3
atlas = ExtResource( 34 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=31]
flags = 3
atlas = ExtResource( 34 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=32]
flags = 3
atlas = ExtResource( 34 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=33]
flags = 3
atlas = ExtResource( 34 )
region = Rect2( 768, 0, 256, 256 )

[sub_resource type="SpriteFrames" id=34]
animations = [ {
"frames": [ SubResource( 30 ), SubResource( 31 ), SubResource( 32 ), SubResource( 33 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="ShaderMaterial" id=35]
shader = ExtResource( 10 )
shader_param/transparencia = 1.0
shader_param/lines = 0
shader_param/screen_height = 256.0
shader_param/amplitude = 0.0
shader_param/frequency = 0.0
shader_param/speed = 1.0
shader_param/amplitude_vertical = 0.081
shader_param/frequency_vertical = 1.748
shader_param/speed_vertical = 1.608
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="AtlasTexture" id=36]
flags = 2
atlas = ExtResource( 8 )
region = Rect2( 0, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=37]
flags = 2
atlas = ExtResource( 8 )
region = Rect2( 256, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=38]
flags = 2
atlas = ExtResource( 8 )
region = Rect2( 512, 0, 256, 256 )

[sub_resource type="AtlasTexture" id=39]
flags = 2
atlas = ExtResource( 8 )
region = Rect2( 768, 0, 256, 256 )

[sub_resource type="SpriteFrames" id=40]
animations = [ {
"frames": [ SubResource( 36 ), SubResource( 37 ), SubResource( 38 ), SubResource( 39 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[node name="Scene Test" type="CanvasLayer"]

[node name="BACKGROUNDS" type="TextureRect" parent="."]
margin_left = -4.0
margin_top = -5.0
margin_right = 40.0
margin_bottom = 40.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Shaders" type="TextureRect" parent="BACKGROUNDS"]
margin_right = 40.0
margin_bottom = 40.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="6" type="AnimatedSprite" parent="BACKGROUNDS/Shaders"]
visible = false
material = SubResource( 2 )
position = Vector2( 131.377, 130.382 )
frames = SubResource( 9 )
frame = 1
playing = true

[node name="5" type="AnimatedSprite" parent="BACKGROUNDS/Shaders"]
visible = false
material = SubResource( 11 )
position = Vector2( 131.377, 130.382 )
frames = SubResource( 18 )
frame = 2
playing = true

[node name="4" type="AnimatedSprite" parent="BACKGROUNDS/Shaders"]
visible = false
material = SubResource( 20 )
position = Vector2( 131.377, 130.382 )
frames = SubResource( 27 )
frame = 3
playing = true

[node name="AnimatedSprite16" type="AnimatedSprite" parent="BACKGROUNDS/Shaders/4"]
material = SubResource( 28 )
position = Vector2( -0.000144958, -0.000350952 )
frames = SubResource( 27 )
frame = 1
playing = true
flip_h = true
flip_v = true

[node name="3" type="AnimatedSprite" parent="BACKGROUNDS/Shaders"]
visible = false
material = SubResource( 20 )
position = Vector2( 131.377, 130.382 )
frames = SubResource( 27 )
frame = 4
playing = true

[node name="2" type="AnimatedSprite" parent="BACKGROUNDS/Shaders"]
visible = false
material = SubResource( 29 )
position = Vector2( 131.377, 130.382 )
frames = SubResource( 34 )
frame = 1
playing = true

[node name="1" type="AnimatedSprite" parent="BACKGROUNDS/Shaders"]
material = SubResource( 35 )
position = Vector2( 131.377, 130.382 )
frames = SubResource( 40 )
playing = true
